#!/bin/sh

HOSTNAME=photomaster.irc.umbc.edu:8080

function usage {
echo "    Usage: $0 [command]

    fire        Take a picture.
    ls          List all objects.
    get         Prints settings or options.
    set         Set a setting.
    help        Print this help text.
    about       Print about info.
"
}

function usage_get {
echo "    Usage: $0 get [value]

    settings                Print the current settings.
    options                 Print all of the available options that are able to be set.
"
}

function usage_set {
echo "    Usage: $0 set [object] [value]

    aperture [value]        Set the aperture.
    shutter [value]         Set the shutter speed.
    iso [value]             Set the iso.
    projector [value]       Set the projector image. noise.jpg or null
"
}

function about {
echo "This bash script was created to make it easier and quicker to interface 
with the PhotoRig. It was not created to replace the REST API, but to make 
the most common actions just a little quicker to use. To do more advanced 
stuff please still use the REST API.

    
    Heartbeat
        curl -X GET $HOSTNAME/heartbeat

    Fire - take a shot.
        curl -X GET $HOSTNAME/fire

    Options - Display options that you can set.
        curl -X GET $HOSTNAME/options
   
    Capture Configure - set a capture setting.
        curl -X POST $HOSTNAME/capture/configure -H "Content-Type: application/json" -d '{"capturesettings": {"aperture": "5"}}'

    Images - Get a list of all working images
        curl -X GET $HOSTNAME/images
    
    Image - Get a single image
        curl -X GET $HOSTNAME/image/<path:path>

"
}

function fire {
    curl -X POST $HOSTNAME/fire
}

function list {
    if [ $# -gt 0 ]; then

        OUTPUT=$(curl -s -X GET $HOSTNAME/images)

        for i in $@; do
            echo "\033[34m$i\033[0m:"
            echo $OUTPUT | jq '."'$i'"'
            echo
        done

    else 
        curl -s -X GET $HOSTNAME/images | jq
    fi
}

function get_ {
    case "$1" in
    settings)
        settings
        ;;
    options)
        options
        ;;
    *)
        usage_get
        ;;
    esac
}

function settings {
    curl -s -X GET $HOSTNAME/capture/configure | jq
}


function options {
    curl -s -X GET $HOSTNAME/options | jq
}

function set_ {
<<<<<<< HEAD

    case "$1" in 
    aperture)
        set_aperture $2 
=======
    case "$1" in 
    aperture)
        set_aperture $2
>>>>>>> 628d2245c625a67e84ace675f79f19b13d6ed16e
        ;;
    shutter)
        set_shutter $2
        ;;
    iso)
        set_iso $2
        ;;
    projector)
        set_projector $2
        ;;
    *)
        usage_set
        ;;
    esac
}

function set_aperture {

    if [ $# -eq 1 ]; then
<<<<<<< HEAD
        response=$(curl -s -X GET $HOSTNAME/capture/configure)
        key=$(echo $response | jq -r '.configuration | keys[0]')
        json=$(echo $response | jq '.configuration."'$key'".capturesettings.aperture = "'$1'" | .configuration."'$key'"')

        curl -X POST $HOSTNAME/capture/configure -H "Content-Type: application/json" -d "$json"
=======
        curl -X POST $HOSTNAME/capture/configure -H "Content-Type: application/json" -d '{"capturesettings": {"aperture": "'$1'"}}'
>>>>>>> 628d2245c625a67e84ace675f79f19b13d6ed16e
    else
        usage_set
    fi
}

function set_shutter {
    if [ $# -eq 1 ]; then
<<<<<<< HEAD
        response=$(curl -s -X GET $HOSTNAME/capture/configure)
        key=$(echo $response | jq -r '.configuration | keys[0]')
        json=$(echo $response | jq '.configuration."'$key'".capturesettings.shutterspeed = "'$1'" | .configuration."'$key'"')
        
        curl -X POST $HOSTNAME/capture/configure -H "Content-Type: application/json" -d "$json"
=======
        curl -X POST $HOSTNAME/capture/configure -H "Content-Type: application/json" -d '{"capturesettings": {"shutterspeed": "'$1'"}}'
>>>>>>> 628d2245c625a67e84ace675f79f19b13d6ed16e
    else
        usage_set
    fi
}

function set_iso {
    if [ $# -eq 1 ]; then
<<<<<<< HEAD
        response=$(curl -s -X GET $HOSTNAME/capture/configure)
        key=$(echo $response | jq -r '.configuration | keys[0]')
        json=$(echo $response | jq '.configuration."'$key'".imgsettings.iso = "'$1'" | .configuration."'$key'"')

        curl -X POST $HOSTNAME/capture/configure -H "Content-Type: application/json" -d "$json"
=======
        curl -X POST $HOSTNAME/capture/configure -H "Content-Type: application/json" -d '{"imgsettings": {"iso": "'$1'"}}'
>>>>>>> 628d2245c625a67e84ace675f79f19b13d6ed16e
    else
        usage_set
    fi
}

function set_projector {
    if [ $# -eq 1 ]; then
<<<<<<< HEAD
        response=$(curl -s -X GET $HOSTNAME/capture/configure)
        key=$(echo $response | jq -r '.configuration | keys[0]')
        json=$(echo $response | jq '.configuration."'$key'".projector_image = "'$1'" | .configuration."'$key'"')
        
        curl -X POST $HOSTNAME/capture/configure -H "Content-Type: application/json" -d "$json"
=======
        curl -X POST $HOSTNAME/capture/configure -H "Content-Type: application/json" -d '{"projector_image": "'$1'"}'
>>>>>>> 628d2245c625a67e84ace675f79f19b13d6ed16e
    else
        usage_set
    fi
}





case "$1" in
about)
    about
    ;;
fire)
    fire
    ;;
ls)
    list "${@:2}"
    ;;
get)
    get_ $2
    ;;
set)
    set_ $2 $3
    ;;
*)
    usage
    ;;
esac
